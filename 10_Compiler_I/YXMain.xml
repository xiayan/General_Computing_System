<class>
	<keyword> class </keyword>
	<identifier> Main </identifier>
	<symbol> { </symbol>
	<subroutineDec>
		<keyword> function </keyword>
		<keyword> void </keyword>
		<identifier> main </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<identifier> Array </identifier>
				<identifier> a </identifier>
				<symbol> , </symbol>
				<identifier> b </identifier>
				<symbol> , </symbol>
				<identifier> c </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> a </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> Array </identifier>
							<symbol> . </symbol>
							<identifier> new </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 10 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> b </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> Array </identifier>
							<symbol> . </symbol>
							<identifier> new </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 5 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> c </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> Array </identifier>
							<symbol> . </symbol>
							<identifier> new </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 1 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> a </identifier>
					<symbol> [ </symbol>
					<expression>
						<term>
							<integerConstant> 3 </integerConstant>
						</term>
					</expression>
					<symbol> ] </symbol>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 2 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> a </identifier>
					<symbol> [ </symbol>
					<expression>
						<term>
							<integerConstant> 4 </integerConstant>
						</term>
					</expression>
					<symbol> ] </symbol>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 8 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> a </identifier>
					<symbol> [ </symbol>
					<expression>
						<term>
							<integerConstant> 5 </integerConstant>
						</term>
					</expression>
					<symbol> ] </symbol>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 4 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> b </identifier>
					<symbol> [ </symbol>
					<expression>
						<term>
							<identifier> a </identifier>
							<symbol> [ </symbol>
							<expression>
								<term>
									<integerConstant> 3 </integerConstant>
								</term>
							</expression>
							<symbol> ] </symbol>
						</term>
					</expression>
					<symbol> ] </symbol>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> a </identifier>
							<symbol> [ </symbol>
							<expression>
								<term>
									<integerConstant> 3 </integerConstant>
								</term>
							</expression>
							<symbol> ] </symbol>
						</term>
						<symbol> + </symbol>
						<term>
							<integerConstant> 3 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> a </identifier>
					<symbol> [ </symbol>
					<expression>
						<term>
							<identifier> b </identifier>
							<symbol> [ </symbol>
							<expression>
								<term>
									<identifier> a </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<integerConstant> 3 </integerConstant>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
							</expression>
							<symbol> ] </symbol>
						</term>
					</expression>
					<symbol> ] </symbol>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> a </identifier>
							<symbol> [ </symbol>
							<expression>
								<term>
									<identifier> a </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<integerConstant> 5 </integerConstant>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
							</expression>
							<symbol> ] </symbol>
						</term>
						<symbol> * </symbol>
						<term>
							<identifier> b </identifier>
							<symbol> [ </symbol>
							<expression>
								<term>
									<integerConstant> 7 </integerConstant>
								</term>
								<symbol> - </symbol>
								<term>
									<identifier> a </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<integerConstant> 3 </integerConstant>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
								<symbol> - </symbol>
								<term>
									<identifier> Main </identifier>
									<symbol> . </symbol>
									<identifier> double </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<integerConstant> 2 </integerConstant>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ] </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> c </identifier>
					<symbol> [ </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ] </symbol>
					<symbol> = </symbol>
					<expression>
						<term>
							<keyword> null </keyword>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> c </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> c </identifier>
							<symbol> [ </symbol>
							<expression>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ] </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Output </identifier>
					<symbol> . </symbol>
					<identifier> printString </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
							</expression>
						</expressionList>
					</statements>
				</subroutineBody>
			</subroutineDec>
